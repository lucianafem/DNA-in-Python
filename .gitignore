# https://www.ncbi.nlm.nih.gov/nuccore/XM_011242420.3
# see CDS where the 321..1580 sequence begins to be read
# https://www.ncbi.nlm.nih.gov/nuccore/XM_011242420.3?report=fasta     (press FASTA) to copy the seq without number

inputfile='C:/Users/fruti/Documents/Python/Datas/seq.txt'
f= open(inputfile,'r')
seq=f.read()

seq=seq.replace('\n','')
seq=seq.replace('\r','')

print(len(seq))   # 2744/3 is not divisible by 3

seq=seq[320:1577]
print('len=',len(seq))

# Site: https://www.ncbi.nlm.nih.gov/nuccore/XM_011242420.3?report=genbank. 
# Select as codon[1:3]

codon= 'MSGDVADSTDTRSTFGQVEPGNDRNGLDFNRQIKTEDLGDSLQQ\
TLSHRPCHLSQGPTMMPGNQMSGDMASLHPLQQLVLVPGHLQSVSQFLLSQTPPGQQG\
LQPNLLSFPQQQSTLLLPQTGPGLASQAVGRPGLSGSSLEPHLDAPQHLPGPKHLPGP\
GGNDEPTDLEELEKFAKTFKQRRIKLGFTQGDVGLAMGKLYGNDFSQTTISRFEALNL\
SFKNMCKLKPLLEKWLNDAESSPSDPSASTPSSYPTLSEVFGRKRKKRTSIETNIRLT\
LEKRFQDNPKPSSEEISMIAEQLSMEKEVVRVWFCNRRQKEKRINCPVATPVKPPIYN\
SRLVSPSGSLGPLSVPPVHSTMPGTVTSSCSPGNNSRPSSPGSGLHASSPTASQNNSK\
AAMNSSSSSSFNSSGSWYRWNHPTYLH'

def translate(seq):
    table = {
     'ATA':'I', 'ATC':'I', 'ATT':'I', 'ATG':'M',
     'ACA':'T', 'ACC':'T', 'ACG':'T', 'ACT':'T',
     'AAC':'N', 'AAT':'N', 'AAA':'K', 'AAG':'K',
     'AGC':'S', 'AGT':'S', 'AGA':'R', 'AGG':'R',
     'CTA':'L', 'CTC':'L', 'CTG':'L', 'CTT':'L',
     'CCA':'P', 'CCC':'P', 'CCG':'P', 'CCT':'P',
     'CAC':'H', 'CAT':'H', 'CAA':'Q', 'CAG':'Q',
     'CGA':'R', 'CGC':'R', 'CGG':'R', 'CGT':'R',
     'GTA':'V', 'GTC':'V', 'GTG':'V', 'GTT':'V',
     'GCA':'A', 'GCC':'A', 'GCG':'A', 'GCT':'A',
     'GAC':'D', 'GAT':'D', 'GAA':'E', 'GAG':'E',
     'GGA':'G', 'GGC':'G', 'GGG':'G', 'GGT':'G',
     'TCA':'S', 'TCC':'S', 'TCG':'S', 'TCT':'S',
     'TTC':'F', 'TTT':'F', 'TTA':'L', 'TTG':'L',
     'TAC':'Y', 'TAT':'Y', 'TAA':'_', 'TAG':'_',
     'TGC':'C', 'TGT':'C', 'TGA':'_', 'TGG':'W'}

    protein=''
    if len(seq)%3==0:    #se o comprimento eh divisivel por 3, onde o resto eh 0
        for i in range(0,len(seq),3):
            codon=seq[i:i+3]
            protein += table[codon]
    return protein
    
# Somente uns testes
# translate('ATA') # I
# translate('CCT') # P
# translate('GAT') # D
# translate('TAA') # -
# translate('ATACCTGATTAA')
    
newseq= translate(seq)

print(newseq==codon) # remember position 320 where you start reading is 321 in Python because it starts at 0

# --------------------------------------------------------------------------------------------------
# blood
# https://www.ncbi.nlm.nih.gov/nuccore/NM_138618.6
#  CDS  150..1214

inputfile='C:/Users/fruti/Documents/Python/Datas/seqblood.txt'
f= open(inputfile,'r')
seq=f.read()

seq=seq.replace('\n','')
seq=seq.replace('\r','')

print(len(seq))   # 2744/3 is not divisible by 3

seq=seq[149:1211]
print('len=',len(seq))

codon='MSSKYPRSVRRCLPLWALTLEAALILLFYFFTHYDASLEDQKGL\
VASYQVGQDLTVMAALGLGFLTSNFRRHSWSSVAFNLFMLALGVQWAILLDGFLSQFP\
PGKVVITLFSIRLATMSAMSVLISAGAVLGKVNLAQLVVMVLVEVTALGTLRMVISNI\
FNTDYHMNLRHFYVFAAYFGLTVAWCLPKPLPKGTEDNDQRATIPSLSAMLGALFLWM\
FWPSVNSALLRSPIQRKNAMFNTYYALAVSVVTAISGSSLAHPQRKISMTYVHSAVLA\
GGVAVGTSCHLIPSPWLAMVLGLVAGLISIGGAKCLPDWLPGPPQHWGTQLGHRDSSH\
VWSPDRFAPKSQNMESTSCG'

def translate(seq):
    table = {
     'ATA':'I', 'ATC':'I', 'ATT':'I', 'ATG':'M',
     'ACA':'T', 'ACC':'T', 'ACG':'T', 'ACT':'T',
     'AAC':'N', 'AAT':'N', 'AAA':'K', 'AAG':'K',
     'AGC':'S', 'AGT':'S', 'AGA':'R', 'AGG':'R',
     'CTA':'L', 'CTC':'L', 'CTG':'L', 'CTT':'L',
     'CCA':'P', 'CCC':'P', 'CCG':'P', 'CCT':'P',
     'CAC':'H', 'CAT':'H', 'CAA':'Q', 'CAG':'Q',
     'CGA':'R', 'CGC':'R', 'CGG':'R', 'CGT':'R',
     'GTA':'V', 'GTC':'V', 'GTG':'V', 'GTT':'V',
     'GCA':'A', 'GCC':'A', 'GCG':'A', 'GCT':'A',
     'GAC':'D', 'GAT':'D', 'GAA':'E', 'GAG':'E',
     'GGA':'G', 'GGC':'G', 'GGG':'G', 'GGT':'G',
     'TCA':'S', 'TCC':'S', 'TCG':'S', 'TCT':'S',
     'TTC':'F', 'TTT':'F', 'TTA':'L', 'TTG':'L',
     'TAC':'Y', 'TAT':'Y', 'TAA':'_', 'TAG':'_',
     'TGC':'C', 'TGT':'C', 'TGA':'_', 'TGG':'W'}

    protein=''
    if len(seq)%3==0:    # if the length is divisible by 3, where the rest is 0
        for i in range(0,len(seq),3):
            codon=seq[i:i+3]
            protein += table[codon]
    return protein
    
# Test
# translate('ATA') # I
# translate('CCT') # P
# translate('GAT') # D
# translate('TAA') # -
# translate('ATACCTGATTAA')
    
newseq= translate(seq)

print(newseq==codon) # remember position 320 where you start reading is 321 in Python because it starts at 0


